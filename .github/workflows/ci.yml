name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # Job 1: Linting e Type Checking
  lint-and-typecheck:
    name: Lint & Type Check
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run ESLint
      run: npm run lint

    - name: Type check
      run: npx tsc --noEmit

  # Job 2: Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run unit tests
      run: npm run test:coverage

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        fail_ci_if_error: false

  # Job 3: Build Test
  build-test:
    name: Build Test
    runs-on: ubuntu-latest

    env:
      DATABASE_URL: "postgresql://test:test@localhost:5432/test_db"
      NEXTAUTH_SECRET: "test-secret"
      NEXTAUTH_URL: "http://localhost:3000"

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-files
        path: .next/
        retention-days: 1

  # Job 4: E2E Tests
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest

    env:
      DATABASE_URL: "postgresql://test:test@localhost:5432/test_db"
      NEXTAUTH_SECRET: "test-secret"
      NEXTAUTH_URL: "http://localhost:3000"

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright browsers
      run: npx playwright install --with-deps

    - name: Run E2E tests
      run: npm run test:e2e

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 30

  # Job 5: Security Audit
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run security audit
      run: npm audit --audit-level=high

    - name: Check for known vulnerabilities
      run: npx audit-ci --config audit-ci.json
      continue-on-error: true

  # Job 6: Deploy (apenas no main)
  deploy:
    name: Deploy to Production
    needs: [lint-and-typecheck, unit-tests, build-test, e2e-tests]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-files
        path: .next/

    - name: Deploy to Vercel
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        vercel-args: '--prod'

  # Job 7: Quality Gate Summary
  quality-gate:
    name: Quality Gate
    needs: [lint-and-typecheck, unit-tests, build-test, e2e-tests, security-audit]
    runs-on: ubuntu-latest
    if: always()

    steps:
    - name: Check Quality Gate
      run: |
        echo "üîç Quality Gate Summary:"
        echo "Lint & Type Check: ${{ needs.lint-and-typecheck.result }}"
        echo "Unit Tests: ${{ needs.unit-tests.result }}"
        echo "Build Test: ${{ needs.build-test.result }}"
        echo "E2E Tests: ${{ needs.e2e-tests.result }}"
        echo "Security Audit: ${{ needs.security-audit.result }}"

        if [[ "${{ needs.lint-and-typecheck.result }}" == "success" &&
              "${{ needs.unit-tests.result }}" == "success" &&
              "${{ needs.build-test.result }}" == "success" &&
              "${{ needs.e2e-tests.result }}" == "success" ]]; then
          echo "‚úÖ Quality Gate PASSED"
          exit 0
        else
          echo "‚ùå Quality Gate FAILED"
          exit 1
        fi