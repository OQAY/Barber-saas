generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  firstName     String?
  lastName      String?
  name          String?
  email         String    @unique
  phone         String?
  password      String?
  emailVerified DateTime?
  image         String?
  provider      String?   @default("email")
  isVerified    Boolean?  @default(false)
  role          UserRole? @default(USER)
  accounts      Account[]
  sessions      Session[]
  bookings      Booking[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum UserRole {
  USER
  BARBER
  MANAGER
  OWNER
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Barbershop {
  id          String              @id @default(uuid())
  email       String              @unique
  name        String
  address     String
  phones      String[]
  description String
  imageUrl    String
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  services    BarbershopService[]
  barbers     Barber[]
}

model Barber {
  id           String     @id @default(uuid())
  name         String
  email        String     @unique
  phone        String?
  photo        String?
  bio          String?
  specialties  String[]
  workingHours Json?
  isActive     Boolean    @default(true)
  role         BarberRole @default(BARBER)
  barbershopId String
  barbershop   Barbershop @relation(fields: [barbershopId], references: [id])
  bookings     Booking[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

enum BarberRole {
  BARBER
  MANAGER
  OWNER
}

model BarbershopService {
  id           String     @id @default(uuid())
  name         String
  description  String
  imageUrl     String
  price        Decimal    @db.Decimal(10, 2)
  barbershopId String
  barbershop   Barbershop @relation(fields: [barbershopId], references: [id])
  bookings     Booking[]
}

model Booking {
  id        String            @id @default(uuid())
  userId    String
  user      User              @relation(fields: [userId], references: [id])
  serviceId String
  service   BarbershopService @relation(fields: [serviceId], references: [id])
  barberId  String
  barber    Barber            @relation(fields: [barberId], references: [id])
  date      DateTime
  status    BookingStatus     @default(SCHEDULED)
  notes     String?
  totalPrice Decimal?         @db.Decimal(10, 2)
  createAt  DateTime          @default(now())
  updatedAt DateTime          @updatedAt
}

enum BookingStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}
